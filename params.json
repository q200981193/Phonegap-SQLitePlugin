{"name":"Phonegap-sqliteplugin","body":"PGSqlitePlugin: SQLitePlugin for Phonegap\r\n=========================================\r\n\r\nThe plugin is meant to work with Phonegap 1.5.0 (Cordova).\r\n\r\nInstalling\r\n==========\r\n\r\nSQLite library\r\n-------------------\r\n\r\nIn order to use the plugin you need to link the sqlite library in your phonegap application.\r\n\r\nIn your projects \"Build Phases\" tab, select the _first_ \"Link Binary with Libraries\" dropdown menu and add the library `libsqlite3.dylib` or `libsqlite3.0.dylib`.\r\n\r\n**NOTE:** In the \"Build Phases\" there can be multiple \"Link Binary with Libraries\" dropdown menus. Please select the first one otherwise it will not work.\r\n\r\nPGSQLite Plugin\r\n---------------\r\n\r\nDrag .h and .m files into your project's Plugins folder (in xcode) -- I always\r\njust have \"Create references\" as the option selected.\r\n\r\nTake the precompiled javascript file from build/, or compile the coffeescript\r\nfile in src/ to javascript WITH the top-level function wrapper option (default).\r\n\r\nUse the resulting javascript file in your HTML.\r\n\r\nLook for the following to your project's PhoneGap.plist:\r\n\r\n    <key>Plugins</key>\r\n    <dict>\r\n      ...\r\n    </dict>\r\n\r\nInsert this in there:\r\n\r\n    <key>PGSQLitePlugin</key>\r\n    <string>PGSQLitePlugin</string>\r\n\r\nGeneral Usage\r\n=============\r\n\r\n`www/index.html` contains a test application that runs very simple queries\r\nusing plain javascript. It is recommended that you first run this one and check\r\nthe XCode console to see that everything is working fine.\r\n\r\nThe following examples show you how you can use transactions.\r\n\r\n## Coffee Script\r\n\r\n    db = new PGSQLitePlugin(\"test_native.sqlite3\")\r\n    db.executeSql('DROP TABLE IF EXISTS test_table')\r\n    db.executeSql('CREATE TABLE IF NOT EXISTS test_table (id integer primary key, data text, data_num integer)')\r\n\r\n    db.transaction (tx) ->\r\n\r\n      tx.executeSql [ \"INSERT INTO test_table (data, data_num) VALUES (?,?)\", \"test\", 100], (res) ->\r\n\r\n        # success callback\r\n\r\n        console.log \"insertId: #{res.insertId} -- probably 1\"\r\n        console.log \"rowsAffected: #{res.rowsAffected} -- should be 1\"\r\n\r\n        # check the count (not a part of the transaction)\r\n        db.executeSql \"select count(id) as cnt from test_table;\", (res) ->\r\n          console.log \"rows.length: #{res.rows.length} -- should be 1\"\r\n          console.log \"rows[0].cnt: #{res.rows[0].cnt} -- should be 1\"\r\n\r\n      , (e) ->\r\n\r\n        # error callback\r\n\r\n        console.log \"ERROR: #{e.message}\"\r\n\r\n## Plain Javascript\r\n\r\n    var db;\r\n    db = new PGSQLitePlugin(\"test_native.sqlite3\");\r\n    db.executeSql('DROP TABLE IF EXISTS test_table');\r\n    db.executeSql('CREATE TABLE IF NOT EXISTS test_table (id integer primary key, data text, data_num integer)');\r\n    db.transaction(function(tx) {\r\n      return tx.executeSql([\"INSERT INTO test_table (data, data_num) VALUES (?,?)\", \"test\", 100], function(res) {\r\n        console.log(\"insertId: \" + res.insertId + \" -- probably 1\");\r\n        console.log(\"rowsAffected: \" + res.rowsAffected + \" -- should be 1\");\r\n        return db.executeSql(\"select count(id) as cnt from test_table;\", function(res) {\r\n          console.log(\"rows.length: \" + res.rows.length + \" -- should be 1\");\r\n          return console.log(\"rows[0].cnt: \" + res.rows[0].cnt + \" -- should be 1\");\r\n        });\r\n      }, function(e) {\r\n        return console.log(\"ERROR: \" + e.message);\r\n      });\r\n    });\r\n\r\n\r\nLawnchair Adapter Usage\r\n=======================\r\n\r\nInclude the following js files in your html:\r\n\r\n-  lawnchair.js (you provide)\r\n-  pgsqlite_plugin.js\r\n-  lawnchair_pgsqlite_plugin_adapter.js (must come after pgsqlite_plugin.js)\r\n\r\n\r\nThe `name` option will determine the sqlite filename. Optionally, you can change it using the `db` option.\r\n\r\nIn this example, you would be using/creating the database at: *Documents/kvstore.sqlite3* (all db's in PGSQLitePlugin are in the Documents folder)\r\n\r\n    kvstore = new Lawnchair { name: \"kvstore\", adapter: PGSQLitePlugin.lawnchair_adapter }, () ->\r\n      # do stuff\r\n\r\nUsing the `db` option you can create multiple stores in one sqlite file. (There will be one table per store.)\r\n\r\n    recipes = new Lawnchair {db: \"cookbook\", name: \"recipes\", ...}\r\n    ingredients = new Lawnchair {db: \"cookbook\", name: \"ingredients\", ...}\r\n\r\n### Other notes from @Joenoon:\r\n\r\nI played with the idea of batching responses into larger sets of\r\nwriteJavascript on a timer, however there was only a barely noticeable\r\nperformance gain.  So I took it out, not worth it.  However there is a\r\nmassive performance gain by batching on the client-side to minimize\r\nPhoneGap.exec calls using the transaction support.\r\n\r\n### Other notes from @davibe:\r\n\r\nI used the plugin to store very large documents (1 or 2 Mb each) and found\r\nthat the main bottleneck was passing data from javascript to native code.\r\nRunning PhoneGap.exec took some seconds while completely blocking my\r\napplication.\r\n\r\n","tagline":"A phonegap plugin to open and use sqlite databases on iOS.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}